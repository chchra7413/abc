memcached可以存数据的数据库软件
1.缓存数据库（数据会丢失，读写极快）
2.简单（k=value）



传统网站架构SSD

                   |------>server1(nginx+php+mysql)--|   （至少两台）
--------->proxy----|------>server2(nginx+php+mysql)--|-->mysql（主从）+集群
                   |------>server3(nginx+php+mysql)--|-10G-->nosql
   
数据能不存数据库就不存数据库，能存硬盘就不存数据库，能存cpu就不要存硬盘
图片，视频，音频（硬盘）
有些必须放数据库（文字，字符：metedata）数据的数据
数据库有强大的查询能力

SQL数据库：mysql,oracle,sqlserver
NOSQL(缓存)数据库（no only  sql）：memcached,redis,mongodb
缺点：重启数据丢失                             |
                                         重启数据丢失，存储速度快
nosql里不能存表   key-value：kv数据库
                  k=value 简单

数据存储位置对比：
 性能：cpu缓存-->内存-->磁盘-->数据库
 价格：cpu缓存-->内存-->磁盘-->数据库


在192.168.4.5（proxy）上装包，yum  -y install  memcached              
[root@Proxy ~]# yum  -y  install  memcached
[root@Proxy ~]# systemctl start   memcached
[root@Proxy ~]# ss  -antlp  | grep  11211  查看网络连接状态验证是否开启成功
LISTEN     0      128          *:11211                    *:*                   users:(("memcached",pid=5810,fd=26))
LISTEN     0      128         :::11211                   :::*                   users:(("memcached",pid=5810,fd=27))

memcached配置systemctl  start  memcached
[root@Proxy ~]# vim  /usr/lib/systemd/system/memcached.service 
ExecStart=/usr/bin/memcached -u $USER -p $PORT -m $CACHESIZE -c $MAXCONN $OPTIONS                                              

变量文件（memcache配置文件）
[root@Proxy ~]# vim  /etc/sysconfig/memcached 
PORT="11211"端口号
USER="memcached"用户
MAXCONN="1024"多大连接
CACHESIZE="64"工作中64M需要改，默认是64
OPTIONS=""

步骤二：使用telnet访问memcached服务器

使用yum安装telnet 远程连接软件，可以帮你连接任何端口
[root@proxy ~]# yum –y install telnet

使用telnet连接服务器测试memcached服务器功能，包括增、删、改、查等操作
[root@Proxy ~]# telnet  192.168.4.5  11211
Trying 192.168.4.5...
Connected to 192.168.4.5.
Escape character is '^]'.当死说明操作成功
接着写入内容：
set  wml  0  180  3
jpg回车(设置key【数据库】名称为wml  0表示不压缩   180秒后数据会自动删除  存的内容是3个字符)空格也算一个字符
STORED
get  wml  查看wml（直接在里面查看，不在命令行）
VALUE wml 0 3
jpg（查到的结果）
END
180秒后再get查看，查不到
quit退出（临时测试，说明数据库ok）


add myname 0 180 10     新建，myname不存在则添加，存在则报错，add只能新建，不能覆     盖,可以防止数据被覆盖
set myname 0 180 10     添加或替换变量，既能新建又能覆盖
replace myname 0 180 10   替换，如果myname不存在则报错，能改，只能覆盖，不能新建
get myname                 读取变量
append myname 0 180 10     向变量中追加数据
delete myname   删除变量
stats   查看状态，看到的都是别人对你的次数
flush_all   清空所有
显示出ok说明全部删除



案例2：LNMP+memcached
步骤一：部署LNMP环境（如果环境中已经存在LNMP环境本步骤可以忽略）

使用yum安装基础依赖包
[root@proxy ~]# yum -y install gcc openssl-devel pcre-devel zlib-devel
[root@proxy ~]# tar -zxvf nginx-1.12.2.tar.gz
[root@proxy ~]# cd nginx-1.12.2
[root@proxy nginx-1.12.2]#  ./configure   --with-http_ssl_module 
[root@proxy nginx-1.12.2]# make && make install
安装MariaDB数据库
[root@proxy ~]# yum –y install  mariadb  mariadb-server  mariadb-devel
安装PHP
[root@proxy ~]# yum –y install  php  php-mysql
[root@proxy lnmp_soft]# rpm  -ivh  php-fpm-5.4.16-42.el7.x86_64.rpm
为PHP添加memcache扩展
[root@proxy ~]# yum –y install  php-pecl-memcache
[root@proxy ~]# vim  /usr/local/nginx/html/test.php
<?php
$i=33;
echo  $i;
?>
修改Nginx配置文件
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
location / {
            root   html;
            index  index.php  index.html   index.htm;
        }
 location  ~  \.php$ {
            root           html;
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
            include        fastcgi.conf;
       

步骤二：启动服务

1）启动Nginx服务
这里需要注意的是，如果服务器上已经启动了其他监听80端口的服务软件（如httpd），则需要先关闭该服务，否则会出现冲突。
[root@proxy ~]# systemctl stop  httpd   如果该服务存在，则关闭该服务
[root@proxy ~]#nginx  -s  reload
[root@proxy ~]# netstat -utnlp | grep :80
tcp    0    0 0.0.0.0:80        0.0.0.0:*        LISTEN        32428/nginx         
启动MySQL服务
[root@proxy ~]# systemctl restart mariadb
[root@proxy ~]# systemctl status mariadb
启动PHP-FPM服务
[root@proxy ~]# systemctl restart php-fpm
[root@proxy ~]# systemctl status php-fpm

步骤三：创建PHP页面，使用PHP语言测试memcached服务

创建PHP首页文档/usr/local/nginx/html/index.php，测试页面可以参考lnmp_soft/php_scripts/mem.php

[root@Proxy ~]# cd  /root/lnmp_soft/php_scripts/
[root@Proxy php_scripts]# cp  mem.php  /usr/local/nginx/html/

[root@Proxy php_scripts]# cat  mem.php 
<?php
$memcache=new Memcache;   创建memcache对象
$memcache->connect('localhost',11211) or die ('could not connect!! ');
$memcache->set('key', 'test');  定义变量
$get_values=$memcache->get('key');   获取变量值
echo $get_values;
?>

步骤四：客户端测试

客户端使用浏览器访问服务器PHP首页文档，检验对memcached的操作是否成功：
[root@client ~]# firefox http://192.168.4.5/test.php
[root@client ~]# firefox http://192.168.4.5/mem.php

1.是否有动静分离（下载页面）
2.是否安装php-pecl-memcache扩展包（空白）
3.是否重启php-fpm（空白）

[root@Proxy lnmp_soft]# tailf  /var/log/php-fpm/www-error.log 查看日志页面

 案例3：PHP的本地Session信息

通过Nginx调度器负载后端两台Web服务器，实现以下目标：
部署Nginx为前台调度服务器
调度算法设置为轮询
后端为两台LNMP服务器
部署测试页面，查看PHP本地的Session信息
分别为Web1服务器（192.168.2.100）和Web2服务器（192.168.2.200）做LNMP动静分离

[root@Web1 ~]# yum  -y install  pcre-devel  openssl-devel  gcc  php   php-mysql  php-pecl-memcache  mariadb   mariadb-server   mariadb-devel

[root@Web1 ~]# tar  -xf  lnmp_soft.tar.gz
[root@Web1 ~]#cd  lnmp_soft/
[root@Web1 lnmp_soft]# tar  -xf  nginx-1.12.2.tar.gz 
[root@Web1 lnmp_soft]# cd  nginx-1.12.2/
[root@Web1 lnmp_soft]# useradd  -s  /sbin/nologin  nginx
 [root@Web1 lnmp_soft]# ./configure  --user=nginx  --group=nginx  --with-http_ssl_module
[root@Web1 lnmp_soft]# make  &&  make  install
[root@Web1 lnmp_soft]# vim  /usr/local/nginx/conf/nginx.conf
location / {
            root   html;
            index  index.php  index.html   index.htm;
        }
 location  ~  \.php$  {
            root           html;
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
            include        fastcgi.conf;
        }

[root@Web1 lnmp_soft]#ln  -s  /usr/local/nginx/sbin/nginx   /sbin/
[root@Web1 lnmp_soft]# nginx 
[root@Web1 lnmp_soft]# nginx  -s  reload
[root@Web1 lnmp_soft]# vim  /usr/local/nginx/html/test.php
<?php
$i=33;
echo $i;
?>

[root@Web1 lnmp_soft]# vim  /usr/local/nginx/html/test.php
[root@Web1 lnmp_soft]#  nginx  -s  reload
[root@Web1 lnmp_soft]# rpm -ivh php-fpm-5.4.16-42.el7.x86_64.rpm 
[root@Web1 lnmp_soft]# systemctl restart php-fpm
[root@Web1 lnmp_soft]# systemctl restart mariadb

创建PHP测试页面,连接并查询MariaDB数据库
[root@Proxy ~]# cd  /root/lnmp_soft/php_scripts/
[root@Proxy php_scripts]# cp  mysql.php  /usr/local/nginx/html/
[root@Proxy php_scripts]# ls  /usr/local/nginx/html/
\  50x.html  index.html  mysql.php  test.php
[root@proxy ~]# vim /usr/local/nginx/html/mysql.php
<?php
$mysqli = new mysqli('localhost','root','密码','mysql'); 注意：root为mysql账户名称，密码需要修改为实际mysql密码，无密码则留空即可
if (mysqli_connect_errno()){
    die('Unable to connect!'). mysqli_connect_error();
}
$sql = "select * from user";
$result = $mysqli->query($sql);
while($row = $result->fetch_array()){
    printf("Host:%s",$row[0]);
    printf("</br>");
    printf("Name:%s",$row[1]);
    printf("</br>");
}
?>
客户端使用浏览器访问服务器PHP首页文档，检验是否成功：
[root@Web2 lnmp_soft]# firefox http://192.168.2.100/test.php
[root@Web2 lnmp_soft]# firefox http://192.168.2.100/mysql.php

步骤一：部署前端Nginx调度服务器
使用源码安装nginx软件（如果Nginx软件包已存在可以忽略此步骤）
修改Nginx配置文件
Nginx配置文件中，通过upstream定义后端服务器地址池，默认调度策略为轮询，使用proxy_pass调用upstream定义的服务器地址池

root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
.. ..
upstream webs  {
        server 192.168.2.100:80;
        server 192.168.2.200:80;
  }
 server  {
          listen       80;
          server_name  localhost;
          location  /  {
              proxy_pass http://webs;
            root   html;
            index  index.html index.htm;
          }
}
[root@proxy ~]# nginx
客户端测试
[root@Client ~]# firefox http://192.168.4.5
出现welcome....则ok

三台主机都修改默认首页
192.168.4.5   192.168.2.100  192.168.2.200
# vim  /usr/local/nginx/conf/nginx.conf
...记得注释掉ip_hash;
  location  /{
	index  index.php  index.html;
}

任何一台主机打开
vim  /etc/php-fpm.d/www.conf 
(最后两行，不修改)
php_value[session.save_handler] = files
php_value[session.save_path] = /var/lib/php/session

在2.100和2.200上都作相同操作

[root@Web1 ~]# cd  /root/lnmp_soft/php_scripts/
[root@Web1 php_scripts]# tar  -xf  php-memcached-demo.tar.gz 
[root@Web1 php_scripts]# cp  -r  php-memcached-demo/*   /usr/local/nginx/html/
[root@Web1 php_scripts]# vim  /usr/local/nginx/html/index.php 
修改前：
<body>
修改后：
<body bgcolor=red> 相同浏览器颜色设置要一致
                         颜色也可以用数字表示，百度搜html颜色
[root@Web1 php_scripts]# vim  /usr/local/nginx/html/home.php 
修改前：
<body>
修改后：
<body bgcolor=red>

Web2重复上述操作，

任何一台机子访问192.168.4.5，， F5刷新,登录多次（注册信息，随意输），如果需要再次注册，说明两台主机都有session，分别 cd /var/lib/php/session
ls查看结果，
后台服务器有几台就登几次

在2.100和2.200做相同操作
# vim  /etc/php-fpm.d/www.conf 
修改最后两行
php_value[session.save_handler] = memcache
              定义Session信息存储在公共的memcached服务器上，主机参数中为memcache（没有d）
php_value[session.save_path] = tcp://192.168.2.5:11211
                     通过path参数定义公共的memcached服务器在哪（服务器的IP和端口)

[root@Web1 session]# yum  -y  install php-pecl-memcache
[root@Web1 session]# systemctl restart php-fpm

客户端测试
访问4.5，不用多次登录，直接进入到页面

Web2重复Web1的所有操作

